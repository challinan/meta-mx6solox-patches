diff --git a/meta-mentor-mx6solox-memf/recipes-apps/demo-master/files/mat_mul_demo.c b/meta-mentor-mx6solox-memf/recipes-apps/demo-master/files/mat_mul_demo.c
index 4b73663..e833ad4 100644
--- a/meta-mentor-mx6solox-memf/recipes-apps/demo-master/files/mat_mul_demo.c
+++ b/meta-mentor-mx6solox-memf/recipes-apps/demo-master/files/mat_mul_demo.c
@@ -28,12 +28,12 @@ static void matrix_print(struct _matrix *m)
 	int i, j;
 
 	/* Generate two random matrices */
-	printf(" \r\n Master : Linux : Printing results \r\n");
+	printf(" \n Master : Linux : Printing results \n");
 
 	for (i = 0; i < m->size; ++i) {
 		for (j = 0; j < m->size; ++j)
 			printf(" %d ", (unsigned int)m->elements[i][j]);
-		printf("\r\n");
+		printf("\n");
 	}
 }
 
@@ -51,9 +51,9 @@ static void generate_matrices(int num_matrices,
 		/* Initialize workload */
 		p_matrix[i].size = matrix_size;
 
-		printf(" \r\n Master : Linux : Input matrix %d \r\n", i);
+		printf("Master : Linux : Input matrix %d\n", i);
 		for (j = 0; j < matrix_size; j++) {
-			printf("\r\n");
+			printf("\n");
 			for (k = 0; k < matrix_size; k++) {
 
 				value = (rand() & 0x7F);
@@ -63,7 +63,7 @@ static void generate_matrices(int num_matrices,
 				(unsigned int)p_matrix[i].elements[j][k]);
 			}
 		}
-		printf("\r\n");
+		printf("\n");
 	}
 
 }
@@ -84,12 +84,12 @@ void *ui_thread_entry(void *ptr)
 	int flag = 1;
 
 	while (flag) {
-		printf("\r\n **************************************** \r\n");
-		printf(" Please enter command and press enter key\r\n");
-		printf(" **************************************** \r\n");
+		printf("\n ****************************************\n");
+		printf(" Please enter command and press enter key\n");
+		printf(" **************************************** \n");
 		printf(" 1 - Generates random 6x6 matrices and transmits");
-		printf(" them to remote core over rpmsg .. \r\n");
-		printf(" 2 - Quit this application .. \r\n");
+		printf(" them to remote core over rpmsg ...\n");
+		printf(" 2 - Quit this application ...\n");
 		printf(" CMD>");
 		ret = scanf("%d", &cmd);
 		if (!ret) {
@@ -98,24 +98,24 @@ void *ui_thread_entry(void *ptr)
 					break;
 			}
 
-			printf("\r\n invalid command\r\n");
+			printf("\n invalid command\n");
 			continue;
 		}
 		if (cmd == 1) {
 			compute_flag = 1;
 			pthread_mutex_unlock(&sync_lock);
 
-			printf("\r\n Compute thread unblocked .. \r\n");
+			printf("\n Compute thread unblocked ...\n");
 			printf(" The compute thread is now blocking on");
-			printf("a read() from rpmsg device \r\n");
-			printf("\r\n Generating random matrices now ... \r\n");
+			printf("a read() from rpmsg device\n");
+			printf("\n Generating random matrices now ...\n");
 
 			i_matrix = malloc(sizeof(*i_matrix)*2);
 
 			generate_matrices(2, 6, i_matrix);
 
-			printf("\r\n Writing generated matrices to rpmsg ");
-			printf("rpmsg device, %d bytes written .. \r\n",
+			printf("\n Writing generated matrices to rpmsg ");
+			printf("rpmsg device, %d bytes written ...\n",
 					sizeof(*i_matrix)*2);
 
 			write(fd, i_matrix, sizeof(*i_matrix)*2);
@@ -129,10 +129,10 @@ void *ui_thread_entry(void *ptr)
 			flag = 0;
 			compute_flag = 0;
 			pthread_mutex_unlock(&sync_lock);
-			printf("\r\n Quitting application .. \r\n");
-			printf(" Matrix multiplication demo end \r\n");
+			printf("\n Quitting application ...\n");
+			printf(" Matrix multiplication demo end\n");
 		} else {
-			printf("\r\n invalid command! \r\n");
+			printf("\n invalid command!\n");
 		}
 	}
 
@@ -149,14 +149,15 @@ void *compute_thread_entry(void *ptr)
 		r_matrix = malloc(sizeof(*r_matrix));
 
 		bytes_rcvd = read(fd, r_matrix, sizeof(*r_matrix));
+		if (bytes_rcvd == -1) {
+			perror("compute_thread_entry failed");
+			return(bytes_rcvd);
+		}
 
-		printf("\r\n Received results! - %d bytes from ", bytes_rcvd);
-		printf("rpmsg device (transmitted from remote context) \r\n");
+		printf("Received results! - %d bytes from ", bytes_rcvd);
 
 		matrix_print(r_matrix);
-
 		free(r_matrix);
-
 		pthread_mutex_lock(&sync_lock);
 	}
 
@@ -166,40 +167,64 @@ void *compute_thread_entry(void *ptr)
 int main(int argc, char *argv[])
 {
 	unsigned int size;
+	int rc;
 
-	printf("\r\n Matrix multiplication demo start \r\n");
-
-	printf("\r\n Open rpmsg dev! \r\n");
+	printf("Matrix multiplication demo start\n");
+	printf("Open rpmsg dev!\n");
 
 	fd = open("/dev/rpmsg", O_RDWR);
+	if ( fd == -1 ) {
+		perror("main: open failed");
+		exit(1);
+	}
 
-	printf("\r\n Query internal info .. \r\n");
-
-	ioctl(fd, RPMSG_GET_KFIFO_SIZE, &size);
-
-	printf(" rpmsg kernel fifo size = %u \r\n", size);
+	rc = ioctl(fd, RPMSG_GET_KFIFO_SIZE, &size);
+	if ( rc != 0 ) {
+		perror("main: ioctl failed");
+		exit(1);
+	}   
+	printf(" rpmsg kernel fifo size = %u\n", size);
 
 	ioctl(fd, RPMSG_GET_FREE_SPACE, &size);
+    if ( rc != 0 ) {
+        perror("main: ioctl (2) failed");
+        exit(1);
+    } 
+	printf(" rpmsg kernel fifo free space = %u\n", size);
+
+	if (pthread_mutex_init(&sync_lock, NULL) != 0) {
+		perror("main: mutex initialization failure");
+		exit(1);
+	}
 
-	printf(" rpmsg kernel fifo free space = %u \r\n", size);
-
-	if (pthread_mutex_init(&sync_lock, NULL) != 0)
-		printf("\r\n mutex initialization failure \r\n");
+	if ( pthread_mutex_lock(&sync_lock) != 0 ) {
+		perror("main: pthread_mutex_lock failed");
+		exit(1);
+	}
 
-	pthread_mutex_lock(&sync_lock);
+	printf("Creating ui_thread and compute_thread ...\n");
 
-	printf("\r\n Creating ui_thread and compute_thread ... \r\n");
+	if ( pthread_create(&ui_thread, NULL, &ui_thread_entry, "ui_thread") != 0 ) {
+		perror("main: pthread_create failed");
+		exit(1);
+	}
 
-	pthread_create(&ui_thread, NULL, &ui_thread_entry, "ui_thread");
+	if ( pthread_create(&compute_thread, NULL, &compute_thread_entry, "compute_thread") != 0 ) {
+		perror("main: pthread_create failed");
+		exit(1);
+	}
 
-	pthread_create(&compute_thread, NULL, &compute_thread_entry,
-				"compute_thread");
-	pthread_join(ui_thread, NULL);
+	if ( pthread_join(ui_thread, NULL) != 0 ) {
+        perror("main: pthread_join failed");
+		exit(1);
+	}
 
-	pthread_join(compute_thread, NULL);
+	if ( pthread_join(compute_thread, NULL) != 0 ) {
+		perror("main: pthread_join(2) failed");
+		exit(1);
+	}
 
-	printf("\r\n Quitting application .. \r\n");
-	printf(" Matrix multiply application end \r\n");
+	printf("Matrix multiply application end\n");
 
 	close(fd);
 
